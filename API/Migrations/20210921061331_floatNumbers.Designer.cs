// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(resortDbContext))]
    [Migration("20210921061331_floatNumbers")]
    partial class floatNumbers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<float>("cardAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("customerid")
                        .HasColumnType("bigint");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("mobile")
                        .HasColumnType("bigint");

                    b.Property<float>("points")
                        .HasColumnType("real");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("customerid")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("API.Models.RoomVariant", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("userId");

                    b.ToTable("RoomVariants");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<byte>("isExportFlag")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.employee.employeeRole", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("roleKey")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("_id");

                    b.HasIndex("userId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("API.Models.functionality.Discount", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isByPercentage")
                        .HasColumnType("bit");

                    b.Property<bool>("isRequiredApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("isRequiredCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("isRequiredId")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("_id");

                    b.HasIndex("userId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("API.Models.functionality.Payment", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isNeedRefNumber")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("userId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("API.Models.products.Product", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("costPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isActivityType")
                        .HasColumnType("bit");

                    b.Property<string>("longName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("numberOfServing")
                        .HasColumnType("int");

                    b.Property<Guid>("productCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("productTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("sellingPrice")
                        .HasColumnType("real");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("productCategoryId");

                    b.HasIndex("productTypeId");

                    b.HasIndex("userId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.Models.products.ProductCategory", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("printerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("userId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("API.Models.products.ProductType", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("_id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationHeader", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("reservationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.Property<string>("voucher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("_id");

                    b.HasIndex("customerId");

                    b.HasIndex("reservationTypeId");

                    b.HasIndex("userId");

                    b.ToTable("ReservationHeaders");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationPayment", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("paymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("paymentRefNum")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("reservationHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("paymentId");

                    b.HasIndex("reservationHeaderId");

                    b.HasIndex("userId");

                    b.ToTable("ReservationPayments");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationRoomLine", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("adultPax")
                        .HasColumnType("int");

                    b.Property<int>("childrenPax")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("grossAmount")
                        .HasColumnType("real");

                    b.Property<int>("mattress")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("reservationHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("roomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("seniorPax")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("totalAmount")
                        .HasColumnType("real");

                    b.Property<float>("totalDiscount")
                        .HasColumnType("real");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("discountId");

                    b.HasIndex("reservationHeaderId");

                    b.HasIndex("roomId");

                    b.HasIndex("userId");

                    b.ToTable("ReservationRoomLines");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationTransLine", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPrinted")
                        .HasColumnType("bit");

                    b.Property<float>("netDiscount")
                        .HasColumnType("real");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("reservationHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("reservationRoomLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("seniorPax")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("discountId");

                    b.HasIndex("productId");

                    b.HasIndex("reservationHeaderId");

                    b.HasIndex("reservationRoomLineId");

                    b.HasIndex("userId");

                    b.ToTable("ReservationTransLines");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationType", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("_id");

                    b.ToTable("ReservationTypes");
                });

            modelBuilder.Entity("API.Models.rooms.Room", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("costPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAllowExtraPax")
                        .HasColumnType("bit");

                    b.Property<bool>("isPerPaxRoomType")
                        .HasColumnType("bit");

                    b.Property<int>("maximumCapacity")
                        .HasColumnType("int");

                    b.Property<int>("minimumCapacity")
                        .HasColumnType("int");

                    b.Property<int>("numberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("roomLongName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("searchName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("RoomVariantId");

                    b.HasIndex("userId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("API.Models.rooms.RoomPricing", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("roomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("sellingPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("roomId");

                    b.HasIndex("userId");

                    b.ToTable("RoomPricings");
                });

            modelBuilder.Entity("API.Models.trans.TransHeader", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("checkOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("grossAmount")
                        .HasColumnType("real");

                    b.Property<float>("netAmount")
                        .HasColumnType("real");

                    b.Property<float>("netDiscount")
                        .HasColumnType("real");

                    b.Property<Guid>("reservationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("totalNumberOfGuest")
                        .HasColumnType("int");

                    b.Property<Guid>("userCheckOutId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checkOutBy");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.Property<string>("voucher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("_id");

                    b.HasIndex("customerId");

                    b.HasIndex("reservationTypeId");

                    b.HasIndex("userCheckOutId");

                    b.HasIndex("userId");

                    b.ToTable("TransHeaders");
                });

            modelBuilder.Entity("API.Models.trans.TransLine", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("netDiscount")
                        .HasColumnType("real");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("seniorPax")
                        .HasColumnType("int");

                    b.Property<Guid>("transHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("transRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("discountId");

                    b.HasIndex("productId");

                    b.HasIndex("transHeaderId");

                    b.HasIndex("transRoomId");

                    b.HasIndex("userId");

                    b.ToTable("TransLines");
                });

            modelBuilder.Entity("API.Models.trans.TransPayment", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("paymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("paymentRefNum")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("transHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("paymentId");

                    b.HasIndex("transHeaderId");

                    b.HasIndex("userId");

                    b.ToTable("TransPayments");
                });

            modelBuilder.Entity("API.Models.trans.TransRoom", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("adultPax")
                        .HasColumnType("int");

                    b.Property<int>("childrenPax")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("discountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("grossAmount")
                        .HasColumnType("real");

                    b.Property<int>("mattress")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("roomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("seniorPax")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("totalAmount")
                        .HasColumnType("real");

                    b.Property<float>("totalDiscount")
                        .HasColumnType("real");

                    b.Property<Guid>("transHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createdBy");

                    b.HasKey("_id");

                    b.HasIndex("discountId");

                    b.HasIndex("roomId");

                    b.HasIndex("transHeaderId");

                    b.HasIndex("userId");

                    b.ToTable("TransRooms");
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.RoomVariant", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.employee.employeeRole", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.functionality.Discount", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.functionality.Payment", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.products.Product", b =>
                {
                    b.HasOne("API.Models.products.ProductCategory", "productCategory")
                        .WithMany()
                        .HasForeignKey("productCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.products.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("productTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productCategory");

                    b.Navigation("productType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.products.ProductCategory", b =>
                {
                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationHeader", b =>
                {
                    b.HasOne("API.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.reservation.ReservationType", "reservationType")
                        .WithMany()
                        .HasForeignKey("reservationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("reservationType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationPayment", b =>
                {
                    b.HasOne("API.Models.functionality.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("paymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.reservation.ReservationHeader", "reservationHeader")
                        .WithMany()
                        .HasForeignKey("reservationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("payment");

                    b.Navigation("reservationHeader");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationRoomLine", b =>
                {
                    b.HasOne("API.Models.functionality.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("API.Models.reservation.ReservationHeader", "reservationHeader")
                        .WithMany("ReservationRoomLine")
                        .HasForeignKey("reservationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.rooms.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discount");

                    b.Navigation("reservationHeader");

                    b.Navigation("room");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationTransLine", b =>
                {
                    b.HasOne("API.Models.functionality.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("API.Models.products.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.reservation.ReservationHeader", "reservationHeader")
                        .WithMany()
                        .HasForeignKey("reservationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.reservation.ReservationRoomLine", "reservationRoomLine")
                        .WithMany()
                        .HasForeignKey("reservationRoomLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discount");

                    b.Navigation("product");

                    b.Navigation("reservationHeader");

                    b.Navigation("reservationRoomLine");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.rooms.Room", b =>
                {
                    b.HasOne("API.Models.RoomVariant", "RoomVariant")
                        .WithMany()
                        .HasForeignKey("RoomVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomVariant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.rooms.RoomPricing", b =>
                {
                    b.HasOne("API.Models.rooms.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("room");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.trans.TransHeader", b =>
                {
                    b.HasOne("API.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.reservation.ReservationType", "reservationType")
                        .WithMany()
                        .HasForeignKey("reservationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "userCheckOut")
                        .WithMany()
                        .HasForeignKey("userCheckOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("reservationType");

                    b.Navigation("user");

                    b.Navigation("userCheckOut");
                });

            modelBuilder.Entity("API.Models.trans.TransLine", b =>
                {
                    b.HasOne("API.Models.functionality.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("API.Models.products.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.trans.TransHeader", "transHeader")
                        .WithMany()
                        .HasForeignKey("transHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.trans.TransRoom", "transRoom")
                        .WithMany()
                        .HasForeignKey("transRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discount");

                    b.Navigation("product");

                    b.Navigation("transHeader");

                    b.Navigation("transRoom");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.trans.TransPayment", b =>
                {
                    b.HasOne("API.Models.functionality.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("paymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.trans.TransHeader", "transHeader")
                        .WithMany()
                        .HasForeignKey("transHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("payment");

                    b.Navigation("transHeader");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.trans.TransRoom", b =>
                {
                    b.HasOne("API.Models.functionality.Discount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("API.Models.rooms.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.trans.TransHeader", "transHeader")
                        .WithMany("TransRoom")
                        .HasForeignKey("transHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discount");

                    b.Navigation("room");

                    b.Navigation("transHeader");

                    b.Navigation("user");
                });

            modelBuilder.Entity("API.Models.reservation.ReservationHeader", b =>
                {
                    b.Navigation("ReservationRoomLine");
                });

            modelBuilder.Entity("API.Models.trans.TransHeader", b =>
                {
                    b.Navigation("TransRoom");
                });
#pragma warning restore 612, 618
        }
    }
}
